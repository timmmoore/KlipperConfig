##########
# MACROS #
##########

######################################################################
# Start Print and End Print
######################################################################

# Replace the slicer's custom start and end g-code scripts with
# START_PRINT and END_PRINT.

[gcode_macro led_on]
gcode:
    set_led led=leddisplay RED=0.2 GREEN=0.3 BLUE=0.1

[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    # Turn on power
    M80
    # Start bed heating
    status_heating
    M140 S{BED_TEMP}
    # Use absolute coordinates
    G90
    # Reset the G-Code Z offset (adjust Z offset if needed)
    SET_GCODE_OFFSET Z=0.0
    # Home the printer
    G28
    # Move the nozzle near the bed
    G1 Z5 F3000
    # Move the nozzle very close to the bed
    G1 Z0.15 F300
    # Wait for bed to reach temperature
    M190 S{BED_TEMP}
    # Set and wait for nozzle to reach temperature
    M109 S{EXTRUDER_TEMP}
    status_printing

[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Move nozzle away from print while retracting
    G91
    G1 X-2 Y-2 E-3 F300
    # Raise nozzle by 10mm
    G1 Z10 F3000
    G90
    # Disable steppers
    M84
    # Turn off power
    M81
    status_off

######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[pause_resume]

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro M80]
gcode:
    # Turn on power
    SET_PIN PIN=ps_on VALUE=1

[delayed_gcode delayed_printer_off]
gcode:
    TEMPERATURE_WAIT SENSOR=extruder MAXIMUM=50
    # Turn off power
    SET_PIN PIN=ps_on VALUE=0

[gcode_macro M81]
gcode:
    UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=30

# The following status macros are available (these go inside of your macros):
#
#    STATUS_READY
#    STATUS_OFF
#    STATUS_BUSY
#    STATUS_HEATING
#    STATUS_LEVELING
#    STATUS_HOMING
#    STATUS_CLEANING
#    STATUS_MESHING
#    STATUS_CALIBRATING_Z
#

[gcode_macro _dp_vars]
# User settings for the display status leds. You can change the status colors and led
variable_colors: {
        'display': {
            'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},
            'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},
            'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},
            'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},
            'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},
            'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},
            'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},
        }
    }
variable_display_led_name:         "leddisplay" 
# The name of the addressable LED chain that contains the logo LED(s)
variable_display_idx:              "1" 
# A comma-separated list of indexes LEDs in the logo
gcode:
    # This section is required.  Do Not Delete.


[gcode_macro _set_dp_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = params.LED|string %}
    {% set idx = (params.IDX|string).split(',') %}
    {% set transmit_last = params.TRANSMIT|default(1) %}

    {% for led_index in idx %}
        {% set transmit=transmit_last if loop.last else 0 %}
        set_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}
    {% endfor %}

[gcode_macro _set_dp_leds_by_name]
gcode:
    {% set leds_name = params.LEDS %}
    {% set color_name = params.COLOR %}
    {% set color = printer["gcode_macro _dp_vars"].colors[leds_name][color_name] %}
    {% set led = printer["gcode_macro _dp_vars"][leds_name + "_led_name"] %}
    {% set idx = printer["gcode_macro _dp_vars"][leds_name + "_idx"] %}
    {% set transmit = params.TRANSMIT|default(1) %}

    _set_dp_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}

[gcode_macro _set_display_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = printer["gcode_macro _dp_vars"].display_led_name %}
    {% set idx = printer["gcode_macro _dp_vars"].display_idx %}
    {% set transmit=params.TRANSMIT|default(1) %}

    _set_dp_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro _set_board_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = printer["gcode_macro _dp_vars"].board_led_name %}
    {% set idx = printer["gcode_macro _dp_vars"].board_idx %}
    {% set transmit=params.TRANSMIT|default(1) %}

    _set_dp_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro set_display_leds_off]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_display_leds red=0 blue=0 green=0 white=0 transmit={transmit}

[gcode_macro status_off]
gcode:
    set_display_leds_off transmit=1

[gcode_macro status_ready]
gcode:
    _set_dp_leds_by_name leds="display" color="standby" transmit=1

[gcode_macro status_busy]
gcode:
    _set_dp_leds_by_name leds="display" color="busy" transmit=1

[gcode_macro status_heating]
gcode:
    _set_dp_leds_by_name leds="display" color="heating" transmit=1

[gcode_macro status_leveling]
gcode:
    _set_dp_leds_by_name leds="display" color="leveling" transmit=1

[gcode_macro status_homing]
gcode:
    _set_dp_leds_by_name leds="display" color="homing" transmit=1

[gcode_macro status_cleaning]
gcode:
    _set_dp_leds_by_name leds="display" color="cleaning" transmit=1

[gcode_macro status_meshing]
gcode:
    _set_dp_leds_by_name leds="display" color="meshing" transmit=1

[gcode_macro status_calibrating_z]
gcode:
    _set_dp_leds_by_name leds="display" color="calibrating_z" transmit=1

[gcode_macro status_printing]
gcode:
    _set_dp_leds_by_name leds="display" color="printing" transmit=1


#Renames existing M105 command to M99105, which can be changed by user
#Checks for difference of 15C between the 2 sensors and shuts off the printer
#if this condition is exceeded
[gcode_macro M105]
rename_existing: M99105 #M105's behavior will be remapped to M99105
gcode:
    M99105
    {% set s1 = printer.extruder.temperature|round(1, 'floor') %}
    {% set s2 = printer["temperature_sensor extruder_2"].temperature|float|round(1, 'floor') %}
    {% if (s1 - s2)|abs > 15.0 and printer.extruder.target != 0.0 %}
    M118 Hotend temperature fluctuation between sensors exceeded 15C. Shutting down.
    M118 Sensor 1:{s1} Sensor 2:{s2}
    M112
    {% endif %}

#Allows for the use of the M118 GCode command
[respond]
